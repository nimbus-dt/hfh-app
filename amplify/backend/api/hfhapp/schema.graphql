type Note @model @auth(rules: [{allow: public}]) {
  id: ID!
  serializedEditorState: String!
  ownerID: ID!
  testapplicationID: ID! @index(name: "byTestApplication")
  untitledfield: String
}

type OptionalSections {
  coApplicant: Boolean!
  propertyInfo: Boolean!
  businessOwnerOrSelfEmployed: Boolean!
  typeOfOwnership: Boolean!
}

type Property @model @auth(rules: [{allow: public}]) {
  id: ID!
  ownerID: ID!
  props: AWSJSON!
}

type WrittenQuestion {
  name: String!
  label: String!
  placeholder: String!
}

type RecordQuestion {
  name: String!
  max: Int!
  label: String!
  acceptedFileTypes: [String!]
}

type CheckQuestion {
  name: String!
  label: String!
}

type HabitatProps {
  customStatus: [String!]
  homeownershipTermsText: String!
  homeownershipMinCurrentAddressMonths: Int!
  homeownershipMinCurrentEmploymentMonths: Int!
  homeownershipNoOpenCycle: String!
  homeownershipHomeText: String!
  homeownershipCheckQuestions: [CheckQuestion!]
  homeownershipRecordQuestions: [RecordQuestion!]
  homeownershipWrittenQuestions: [WrittenQuestion!]
  optionalSections: OptionalSections!
}

type TestCycle @model @auth(rules: [{allow: public}]) {
  id: ID!
  startDate: AWSDate!
  endDate: AWSDate
  isOpen: Boolean!
  props: AWSJSON
  habitatID: ID! @index(name: "byHabitat")
  TestApplications: [TestApplication] @hasMany(indexName: "byTestCycle", fields: ["id"])
}

enum ApplicationTypes {
  ONLINE
  PAPER
}

type ApplicantOptional @model @auth(rules: [{allow: public}]) {
  id: ID!
  ownerID: ID
  props: AWSJSON
}

enum SubmissionStatus {
  SUBMITTED
  UNSUBMITTED
  RETURNED
}

type Asset @model @auth(rules: [{allow: public}]) {
  id: ID!
  ownerId: ID
  props: AWSJSON
}

type Debt @model @auth(rules: [{allow: public}]) {
  id: ID!
  ownerId: ID
  props: AWSJSON
}

type Income @model @auth(rules: [{allow: public}]) {
  id: ID!
  ownerId: ID
  props: AWSJSON
}

type TestApplication @model @auth(rules: [{allow: public}]) {
  id: ID!
  ownerID: ID
  lastSection: String
  members: [Member] @hasMany(indexName: "byTestApplication", fields: ["id"])
  submittedDate: AWSDate!
  reviewStatus: String
  submissionStatus: SubmissionStatus!
  props: AWSJSON
  type: ApplicationTypes!
  testcycleID: ID! @index(name: "byTestCycle")
  Notes: [Note] @hasMany(indexName: "byTestApplication", fields: ["id"])
}

type EmploymentInfo @model @auth(rules: [{allow: public}]) {
  id: ID!
  ownerID: ID
  props: AWSJSON
}

type Member @model @auth(rules: [{allow: public}]) {
  id: ID!
  props: AWSJSON
  testapplicationID: ID! @index(name: "byTestApplication")
  isCoApplicant: Boolean
}

type Record @model @auth(rules: [{allow: public}]) {
  id: ID!
  ownerID: ID
  props: AWSJSON
}

type Written @model @auth(rules: [{allow: public}]) {
  id: ID!
  ownerID: ID
  props: AWSJSON
}

type Checklist @model @auth(rules: [{allow: public}]) {
  id: ID!
  ownerID: ID
  props: AWSJSON
}

type ApplicantInfo @model @auth(rules: [{allow: public}]) {
  id: ID!
  ownerID: ID
  props: AWSJSON
}

type Habitat @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  urlName: String
  state: String
  city: String
  county: String
  countiesServed: [String]
  props: HabitatProps!
  users: [ID]
  AMI: [String]
  TestCycles: [TestCycle] @hasMany(indexName: "byHabitat", fields: ["id"])
}
 