type Maintenance @model @auth(rules: [{allow: public}]) {
  id: ID!
  maintenance: Boolean
}

type SidebarName {
  name: String
  fontSize: String
}

enum ReviewStatus {
  ACCEPTED
  PENDING
  DENIED
  RETURNED
}

type ApplicantProps {
  state: String!
  city: String!
  street: String!
  householdMembersNumber: Int!
  householdAnnualIncome: Float!
  currentlyUnemployed: String!
  currentWorkTitle: String
  nameOfEmployer: String
  howDidYouHearAbout: String!
  firstTimeApplying: String!
  whatAreYouInterestedIn: String!
}

type AffiliateProps {
  titleAtHabitat: String!
  roleDescription: String!
  joinDate: AWSDate
  joinMonth: String
  joinYear: String
}

enum Sexs {
  MALE
  FEMALE
  OTHER
}

enum UserTypes {
  AFFILIATE
  APPLICANT
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String!
  lastName: String!
  dateOfBirth: AWSDate!
  sex: Sexs!
  phoneNumber: String!
  affiliateProps: AffiliateProps
  applicantProps: ApplicantProps
  type: UserTypes!
  owner: ID!
}

enum RootFormStatusTypes {
  ACTIVE
  PENDING
}

type RootForm @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  status: RootFormStatusTypes
  description: String
  files: [String]
  Cycles: [TestCycle] @hasMany(indexName: "byRootForm", fields: ["id"])
  habitatID: ID! @index(name: "byHabitat")
  formUrls: [String!]!
}

type GalleryItem {
  id: String
  image: String
  title: String
  message: String
}

type Decision @model @auth(rules: [{allow: public}]) {
  id: ID!
  status: ReviewStatus!
  serializedEditorState: String!
  testapplicationID: ID! @index(name: "byTestApplication")
}

type FormAnswer @model @auth(rules: [{allow: public}]) {
  id: ID!
  values: AWSJSON
  page: String
  section: String
  testapplicationID: ID! @index(name: "byTestApplication")
}

type Note @model @auth(rules: [{allow: public}]) {
  id: ID!
  serializedEditorState: String!
  ownerID: ID!
  testapplicationID: ID! @index(name: "byTestApplication")
}

type HabitatProps {
  customStatus: [String!]
  gallery: [GalleryItem!]
  sidebarName: SidebarName
  closedCycleMessages: [String!]!
}

type TestCycle @model @auth(rules: [{allow: public}]) {
  id: ID!
  startDate: AWSDateTime!
  endDate: AWSDate
  isOpen: Boolean!
  props: AWSJSON
  TestApplications: [TestApplication] @hasMany(indexName: "byTestCycle", fields: ["id"])
  rootformID: ID! @index(name: "byRootForm")
  name: String
  closedCycleMessage: String!
  formUrl: String!
}

enum ApplicationTypes {
  ONLINE
  PAPER
}

enum SubmissionStatus {
  INCOMPLETE
  COMPLETED
}

type TestApplication @model @auth(rules: [{allow: public}]) {
  id: ID!
  ownerID: ID
  lastSection: String
  submittedDate: AWSDate!
  reviewStatus: ReviewStatus!
  submissionStatus: SubmissionStatus!
  props: AWSJSON
  type: ApplicationTypes!
  testcycleID: ID! @index(name: "byTestCycle")
  Notes: [Note] @hasMany(indexName: "byTestApplication", fields: ["id"])
  FormAnswers: [FormAnswer] @hasMany(indexName: "byTestApplication", fields: ["id"])
  Decisions: [Decision] @hasMany(indexName: "byTestApplication", fields: ["id"])
  customStatus: String
  lastPage: Int
}

type Habitat @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  longName: String
  state: String
  city: String
  props: HabitatProps!
  users: [ID]
  authenticationHeader: String
  RootForms: [RootForm] @hasMany(indexName: "byHabitat", fields: ["id"])
  urlName: String
}
 